snippet def "#ifndef … #define … #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet inc "#include "" (inc)"
#include "${1:${TM_FILENAME/\..+$/.h/}}"
endsnippet

snippet Inc "#include &lt;&gt; (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), ${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet main "010 main() (main)"
int main (int argc, char const${TM_C_POINTER: *}argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet for "030 for int loop (fori)"
for(size_t ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${0:/* code */}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`#!/usr/bin/env ruby -wKU -riconv
name = ENV["TM_FILENAME"] || "untitled"
name = Iconv.iconv("ASCII//TRANSLIT", "UTF-8", name).first
name = name.gsub(/[^a-z0-9]+/i, "_")
uuid = (rand * 2821109907455).round.to_s(36)
print "#{name}_#{uuid}".tr("[a-z]", "[A-Z]")
`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet cl "class .. (class)"
class ${1:${TM_FILENAME/(.+)\..+|.*/(?1:\L$1_t:name)/}}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet do "do...while loop (do)"
do {
	${0:/* code */}
} while(${1:/* condition */});
endsnippet

snippet fprintf "fprintf …"
fprintf(${1:stderr}, "${2:%s}\\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if(${1:/* condition */})
{
	${0:/* code */}
}
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:${TM_FILENAME/^((.*?)\..*)?$/(?1:\L$2:my)/}}
{
	$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if(FILE${TM_C_POINTER: *}fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet st "struct"
struct ${1:${TM_FILENAME/(.+)\..+|.*/(?1:\L$1_t:name)/}}
{
	${0:/* data */}
};
endsnippet

snippet tp "template &lt;typename ..&gt; (template)"
template <typename ${1:_InputIter}>
endsnippet

